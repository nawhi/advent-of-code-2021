import numpy as np

STATE_TRANSITION_MX = np.array([[0,1,0,0,0,0,0,0,0],
               [0,0,1,0,0,0,0,0,0],
               [0,0,0,1,0,0,0,0,0],
               [0,0,0,0,1,0,0,0,0],
               [0,0,0,0,0,1,0,0,0],
               [0,0,0,0,0,0,1,0,0],
               [1,0,0,0,0,0,0,1,0],
               [0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0]])

def agev(fish):
  return [len(list(filter(lambda x: x == i, fish))) for i in range(0,9)]

def simulate(fish, iterations):
  mx = np.linalg.matrix_power(STATE_TRANSITION_MX, iterations)
  return sum(mx @ agev(fish))


def test_agev():
  for fish, expected in [
    [[], [0,0,0,0,0,0,0,0,0]],
    [[0], [1,0,0,0,0,0,0,0,0]],
    [[0,0], [2,0,0,0,0,0,0,0,0]],
    [[0,0,0,0], [4,0,0,0,0,0,0,0,0]],
    [[0,0,0,0], [4,0,0,0,0,0,0,0,0]],
    [[0,1,2,3,4,5,6,7,8], [1,1,1,1,1,1,1,1,1]],
    [[4,2,3,2,7,4,6,5,2,4,3,8,5,6,3], [0,0,3,3,3,2,2,1,1]],
    [[6,0,6,4,5,6,0,1,1,2,6,0,1,1,1,2,2,3,3,4,6,7,8,8,8,8], [3,5,3,2,2,1,5,1,4]]
  ]:
    np.testing.assert_equal(agev(fish), expected)

def test_simulate():
  for in_agev, iterations, resulting_num_fish in [
               [[], 0, 0],
               [[1], 1, 1],
               [[0], 1, 2],
               [[3,4,3,1,2], 1, 5],
               [[3,4,3,1,2], 10, 12],
               [[3,4,3,1,2], 18, 26],
               [[3,4,3,1,2], 80, 5934],
  ]:
    np.testing.assert_equal(simulate(in_agev, iterations), resulting_num_fish)

test_agev()
test_simulate()

fish = [4,1,3,2,4,3,1,4,4,1,1,1,5,2,4,4,2,1,2,3,4,1,2,4,3,4,5,1,1,3,1,2,1,4,1,1,3,4,1,2,5,1,4,2,2,1,1,1,3,1,5,3,1,2,1,1,1,1,4,1,1,1,2,2,1,3,1,3,1,3,4,5,1,2,2,1,1,1,4,1,5,1,3,1,3,4,1,3,2,3,4,4,4,3,4,5,1,3,1,3,5,1,1,1,1,1,2,4,1,2,1,1,1,5,1,1,2,1,3,1,4,2,3,4,4,3,1,1,3,5,3,1,1,5,2,4,1,1,3,5,1,4,3,1,1,4,2,1,1,1,1,1,1,3,1,1,1,1,1,4,5,1,2,5,3,1,1,3,1,1,1,1,5,1,2,5,1,1,1,1,1,1,3,5,1,3,2,1,1,1,1,1,1,1,4,5,1,1,3,1,5,1,1,1,1,3,3,1,1,1,4,4,1,1,4,1,2,1,4,4,1,1,3,4,3,5,4,1,1,4,1,3,1,1,5,5,1,2,1,2,1,2,3,1,1,3,1,1,2,1,1,3,4,3,1,1,3,3,5,1,2,1,4,1,1,2,1,3,1,1,1,1,1,1,1,4,5,5,1,1,1,4,1,1,1,2,1,2,1,3,1,3,1,1,1,1,1,1,1,5]

print("puzzle 1", simulate(fish, 80))
print("puzzle 2:", simulate(fish, 256))
